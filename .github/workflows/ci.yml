name: C++ CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Customize these variables as needed
  BUILD_TYPE: Release
  CMAKE_VERSION: 3.22.1

jobs:
  build:
    # Multiple OS support for cross-platform testing
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        compiler: [g++, clang++]
        exclude:
          - os: macos-latest
            compiler: g++

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set up C++ Compiler
      run: |
        if [ "${{ matrix.compiler }}" == "g++" ]; then
          sudo apt-get update
          sudo apt-get install -y g++
        elif [ "${{ matrix.compiler }}" == "clang++" ]; then
          sudo apt-get update
          sudo apt-get install -y clang
        fi

    - name: Install CMake
      run: |
        wget https://github.com/Kitware/CMake/releases/download/v${{ env.CMAKE_VERSION }}/cmake-${{ env.CMAKE_VERSION }}-Linux-x86_64.sh
        chmod +x cmake-${{ env.CMAKE_VERSION }}-Linux-x86_64.sh
        sudo ./cmake-${{ env.CMAKE_VERSION }}-Linux-x86_64.sh --skip-license --prefix=/usr/local

    - name: Install Dependencies
      run: |
        # Add any project-specific dependencies here
        # Example: sudo apt-get install -y libboost-all-dev
        echo "Installing project dependencies"

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} ..

    - name: Build Project
      run: |
        cd build
        make -j$(nproc)

    - name: Run Unit Tests
      run: |
        cd build
        ctest --output-on-failure

    - name: Code Coverage (Optional)
      if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'g++'
      run: |
        # Install gcov and lcov
        sudo apt-get install -y gcov lcov
        
        # Regenerate build with coverage flags
        cd build
        cmake -DCMAKE_BUILD_TYPE=Coverage ..
        make
        make coverage

    - name: Address Sanitizer (Optional)
      if: matrix.os == 'ubuntu-latest'
      env:
        CC: clang
        CXX: clang++
      run: |
        # Build with Address Sanitizer
        cmake -DCMAKE_BUILD_TYPE=Sanitizer ..
        make
        # Run tests with sanitizer
        ASAN_OPTIONS=detect_leaks=1 ctest

    - name: Static Code Analysis
      run: |
        # Install cppcheck if not already available
        sudo apt-get install -y cppcheck
        
        # Run static analysis
        cppcheck src --enable=all --inconclusive --error-exitcode=1

    - name: Build Docker Image (Optional)
      if: github.ref == 'refs/heads/main'
      run: |
        docker build -t myproject/cpp-app:${{ github.sha }} .

    - name: Push to Docker Hub (Optional)
      if: github.ref == 'refs/heads/main'
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        docker push myproject/cpp-app:${{ github.sha }}

  # Optional Deployment Job
  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to Kubernetes
      uses: actions/checkout@v3
      
    - name: Set up Kubernetes
      uses: azure/setup-kubectl@v2
      
    - name: Deploy
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > kubeconfig
        export KUBECONFIG=./kubeconfig
        
        # Update deployment
        kubectl set image deployment/cpp-app cpp-app=myproject/cpp-app:${{ github.sha }}

# Notification Job (Optional)
  notify:
    needs: [build, deploy]
    if: failure()
    runs-on: ubuntu-latest
    steps:
    - name: Send Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
